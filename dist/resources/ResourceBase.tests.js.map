{"version":3,"sources":["../../src/resources/ResourceBase.tests.js"],"names":["use","describe","resource","api","configure","cache","primaryKey","enable","queryService","get","bind","it","then","assert","deepEqual","entries","$$store$$","wasCalled","query","equal","role","length","isOk","Developer","flushCacheStore","data","init","id","foo","entry"],"mappings":"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","file":"ResourceBase.tests.js","sourcesContent":["/* eslint-disable no-magic-numbers */\n\nimport chai         from 'chai';\nimport deepEqual    from 'chai-shallow-deep-equal';\n\nimport mockEntries  from '../../tests/mock/people.json';\nimport Api          from '../../tests/mock/api.js';\nimport ResourceBase from './ResourceBase.js';\n\nchai.use(deepEqual);\n\ndescribe('ResourceBase', function() {\n    const resource      = new ResourceBase();\n    const api           = new Api(mockEntries);\n\n    resource.configure({\n        cache: {\n            primaryKey: 'id',\n            enable: true\n        }\n    });\n\n    resource.queryService = api.get.bind(api);\n\n    it('should return a full dataset if no query object passed', function() {\n        return resource.get()\n            .then(entries => {\n                chai.assert.deepEqual(entries, mockEntries);\n            });\n    });\n\n    it('it should load items into the cache, in a root store if no query passed', function() {\n        chai.assert.deepEqual(resource.cache.$$store$$, mockEntries);\n    });\n\n    it('should not hit the cache if queried again', function() {\n        let wasCalled = false;\n\n        resource.queryService = function(query) {\n            wasCalled = true;\n\n            return api.get(query);\n        };\n\n        return resource.get()\n            .then(entries => {\n                chai.assert.deepEqual(entries, mockEntries);\n                chai.assert.equal(wasCalled, false);\n            });\n    });\n\n    it('should return a subset if queried by key/value', function() {\n        return resource.get({\n            role: 'Developer'\n        })\n            .then(entries => {\n                chai.assert.equal(entries.length, 3);\n            });\n    });\n\n    it('should load multiple items into a key/value cache if queried', function() {\n        chai.assert.isOk(resource.cache.role);\n        chai.assert.isOk(resource.cache.role.Developer);\n        chai.assert.isOk(resource.cache.role.Developer.$$store$$);\n        chai.assert.equal(resource.cache.role.Developer.$$store$$.length, 3);\n    });\n\n    it('should not hit the cache if queried again', function() {\n        let wasCalled = false;\n\n        resource.queryService = function(query) {\n            wasCalled = true;\n\n            return api.get(query);\n        };\n\n        return resource.get({\n            role: 'Developer'\n        })\n            .then(entries => {\n                chai.assert.equal(entries.length, 3);\n                chai.assert.equal(wasCalled, false);\n            });\n    });\n\n    it('should flush the root store if no query passed to `flushCacheStore()`', function() {\n        resource.flushCacheStore();\n\n        chai.assert.equal(resource.cache.$$store$$, null);\n    });\n\n    it('should flush a key/value store if query passed to `flushCacheStore()`', function() {\n        resource.flushCacheStore({\n            role: 'Developer'\n        });\n\n        chai.assert.equal(resource.cache.role.Developer.$$store$$, null);\n    });\n\n    it('should receive init data', function() {\n        const resource = new ResourceBase();\n\n        resource.configure({\n            data: {\n                init: [{\n                    id: 1,\n                    foo: null\n                }]\n            }\n        });\n\n        return resource.get()\n            .then(([entry]) => {\n                chai.assert.equal(entry.id, 1);\n                chai.assert.equal(entry.foo, null);\n            });\n    });\n});"]}