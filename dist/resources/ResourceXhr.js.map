{"version":3,"sources":["../../src/resources/ResourceXhr.js"],"names":["serializeQuery","xhr","ResourceXhr","Config","Object","seal","Implementation","config","configure","body","path","then","transformResponse","bind","catch","transformError","flushCache","query","flushCacheStore","response","Array","isArray","entries","TypeError","queries","queryString","prop","value","replace","toLowerCase","i","item","push","encodeURIComponent","length","join","method","data","request","window","XMLHttpRequest","CODE_CLIENT_ERROR","CODE_SERVER_ERROR","payload","Promise","resolve","Error","open","setRequestHeader","timeout","reject","onload","onerror","ontimeout","send","JSON","stringify","responseText","parse","e","status"],"mappings":"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","file":"ResourceXhr.js","sourcesContent":["import ResourceBase from './ResourceBase';\nimport ConfigRoot    from '../config/ConfigRoot';\nimport ConfigXhr    from '../config/ConfigXhr';\nimport IResource    from '../interfaces/IResource';\n\nclass ResourceXhr extends IResource {}\n\nclass Config extends ConfigRoot {\n    constructor() {\n        super();\n\n        this.xhr = new ConfigXhr();\n\n        Object.seal(this);\n    }\n}\n\nResourceXhr.Implementation = class extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, Config);\n\n        Object.seal(this);\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    create(body) {\n        return ResourceXhr.xhr('post', this.config.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    update(body) {\n        this.flushCache();\n\n        // TODO: iterate through primary key and secondary keys,\n        // and use flushCacheStore instead of flushCache\n\n        return ResourceXhr.xhr('put', this.config.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} query\n     * @return {Promise.<*>}\n     */\n\n    delete(query) {\n        this.flushCacheStore(query);\n\n        // iterate through primary and secondary keys and flush secondary stores\n\n        return ResourceXhr.xhr('delete', this.config.path, query)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object} query\n     * @return  {object[]}\n     */\n\n    queryService(query) {\n        return ResourceXhr.xhr('get', this.config.path, query)\n            .then(response => this.transformResponse(response))\n            .then(entries => {\n                if (!Array.isArray(entries)) {\n                    throw new TypeError('[resource-xhr] Resource service must return an array');\n                }\n\n                return entries;\n            })\n            .catch(this.transformError.bind(this));\n    }\n};\n\n/**\n * Takes a query object and returns a serialized query string.\n * Handles arrays by adding multiple occurences of the same key.\n *\n * @static\n * @public\n * @param   {object} query\n * @return  {string}\n */\n\nexport function serializeQuery(query) {\n    const queries = [];\n\n    let queryString = '';\n\n    for (let prop in query) {\n        let value = query[prop];\n\n        // Convert all query parameters to 'snake_case'\n\n        prop = prop\n            .replace(/([A-Z])/g, '_$1').replace(/^_/, '')\n            .toLowerCase();\n\n        if (Array.isArray(value)) {\n            for (let i = 0, item; (item = value[i]); i++) {\n                queries.push(encodeURIComponent(prop) + '=' + encodeURIComponent(item));\n            }\n        } else {\n            queries.push(encodeURIComponent(prop) + '=' + encodeURIComponent(value));\n        }\n    }\n\n    if (queries.length) {\n        queryString = '?' + queries.join('&');\n    }\n\n    return queryString;\n}\n\n/**\n * A promise-based wrapper for an XHR request.\n *\n * @static\n * @public\n * @param   {string}      method\n * @param   {string}      path\n * @param   {object}      data\n * @return  {Promise.<object>}\n */\n\nexport function xhr(method, path, data) {\n    const request = new window.XMLHttpRequest();\n    const CODE_CLIENT_ERROR = 400;\n    const CODE_SERVER_ERROR = 500;\n\n    let payload = null;\n\n    return Promise.resolve()\n        .then(() => {\n            switch (method) {\n                case 'get':\n                case 'delete':\n                    path += ResourceXhr.serializeQuery(data);\n\n                    break;\n                case 'put':\n                case 'post':\n                    payload = data;\n\n                    break;\n                default:\n                    throw new Error('[resource-xhr] Invalid XHR method');\n            }\n\n            request.open(method, path, true);\n\n            if (payload) {\n                request.setRequestHeader('Content-Type', 'application/json');\n            }\n\n            request.timeout = 60000;\n\n            return new Promise((resolve, reject) => {\n                request.onload      = resolve;\n                request.onerror     = reject;\n                request.ontimeout   = reject;\n\n                request.send(payload ? JSON.stringify(payload) : '');\n            });\n        })\n        .then(() => {\n            let response = {};\n\n            if (request.responseText) {\n                try {\n                    response = JSON.parse(request.responseText);\n                } catch (e) {\n                    throw new Error('[ResourceXhr] Response contained invalid JSON');\n                }\n            }\n\n            if (request.status >= CODE_CLIENT_ERROR && request.status < CODE_SERVER_ERROR) {\n                throw response;\n            } else if (request.status >= CODE_SERVER_ERROR) {\n                throw new Error(request.status);\n            }\n\n            return response;\n        });\n}\n\nexport default ResourceXhr;"]}