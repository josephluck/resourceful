{"version":3,"sources":["../../src/resources/ResourceXhr.js"],"names":["serializeQuery","xhr","ResourceXhr","Config","Object","seal","Implementation","config","configure","body","path","then","transformResponse","bind","catch","transformError","flushCache","query","flushCacheStore","req","res","Promise","resolve","transform","TypeError","response","Array","isArray","entries","queries","queryString","key","value","encodeSnakeCaseUriComponent","i","item","push","encodeURIComponent","subKey","subValue","length","join","method","data","request","window","XMLHttpRequest","CODE_CLIENT_ERROR","CODE_SERVER_ERROR","payload","Error","open","setRequestHeader","timeout","reject","onload","onerror","ontimeout","send","JSON","stringify","responseText","parse","e","status","input","replace","toLowerCase"],"mappings":"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","file":"ResourceXhr.js","sourcesContent":["import ResourceBase from './ResourceBase';\nimport ConfigRoot   from '../config/ConfigRoot';\nimport ConfigXhr    from '../config/ConfigXhr';\nimport IResource    from '../interfaces/IResource';\n\nclass ResourceXhr extends IResource {}\n\nclass Config extends ConfigRoot {\n    constructor() {\n        super();\n\n        this.xhr = new ConfigXhr();\n\n        Object.seal(this);\n    }\n}\n\nResourceXhr.Implementation = class extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, Config);\n\n        Object.seal(this);\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    create(body) {\n        return xhr('post', this.config.xhr.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    update(body) {\n        this.flushCache();\n\n        // TODO: iterate through primary key and secondary keys,\n        // and use flushCacheStore instead of flushCache\n\n        return xhr('put', this.config.xhr.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} query\n     * @return {Promise.<*>}\n     */\n\n    delete(query) {\n        this.flushCacheStore(query);\n\n        // iterate through primary and secondary keys and flush secondary stores\n\n        return xhr('delete', this.config.xhr.path, query)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object}        query\n     * @param   {(object|null)} req\n     * @param   {(object|null)} res\n     * @return  {object[]}\n     */\n\n    queryService(query, req, res) {\n        return Promise.resolve()\n            .then(() => {\n                let transform = null;\n\n                if (typeof (transform = this.config.transform.query) === 'function') {\n                    return transform(query, req, res);\n                }\n\n                return query;\n            })\n            .then(query => {\n                if (!query) {\n                    throw new TypeError('[ResourceXhr] `transform.query` function must return an object');\n                }\n\n                return xhr('get', this.config.xhr.path, query);\n            })\n            .then(response => this.transformResponse(response))\n            .then(entries => {\n                if (!Array.isArray(entries)) {\n                    throw new TypeError('[resource-xhr] Resource service must return an array');\n                }\n\n                return entries;\n            })\n            .catch(this.transformError.bind(this));\n    }\n};\n\n/**\n * Takes a query object and returns a serialized query string.\n * Handles arrays by adding multiple occurences of the same key.\n * Handles objects by adding square brackets on each side (allows one\n * level of nesting). Could be refactored to use recursion.\n *\n * @static\n * @public\n * @param   {object} query\n * @return  {string}\n */\n\nexport function serializeQuery(query) {\n    const queries = [];\n\n    let queryString = '';\n\n    for (let key in query) {\n        const value = query[key];\n\n        // Convert all query parameters to 'snake_case'\n\n        key = encodeSnakeCaseUriComponent(key);\n\n        if (Array.isArray(value)) {\n            for (let i = 0, item; (item = value[i]); i++) {\n                queries.push(key + '=' + encodeURIComponent(item));\n            }\n        } else if (value && typeof value === 'object') {\n            for (let subKey in value) {\n                const subValue = value[subKey];\n\n                subKey = encodeSnakeCaseUriComponent(subKey);\n\n                queries.push(key + '[' + subKey + ']=' + encodeURIComponent(subValue));\n            }\n        } else {\n            queries.push(key + '=' + encodeURIComponent(value));\n        }\n    }\n\n    if (queries.length) {\n        queryString = '?' + queries.join('&');\n    }\n\n    return queryString;\n}\n\n/**\n * A promise-based wrapper for an XHR request.\n *\n * @static\n * @public\n * @param   {string}      method\n * @param   {string}      path\n * @param   {object}      data\n * @return  {Promise.<object>}\n */\n\nexport function xhr(method, path, data) {\n    const request = new window.XMLHttpRequest();\n    const CODE_CLIENT_ERROR = 400;\n    const CODE_SERVER_ERROR = 500;\n\n    let payload = null;\n\n    return Promise.resolve()\n        .then(() => {\n            switch (method) {\n                case 'get':\n                case 'delete':\n                    path += serializeQuery(data);\n\n                    break;\n                case 'put':\n                case 'post':\n                    payload = data;\n\n                    break;\n                default:\n                    throw new Error('[resource-xhr] Invalid XHR method');\n            }\n\n            request.open(method, path, true);\n\n            if (payload) {\n                request.setRequestHeader('Content-Type', 'application/json');\n            }\n\n            request.timeout = 60000;\n\n            return new Promise((resolve, reject) => {\n                request.onload      = resolve;\n                request.onerror     = reject;\n                request.ontimeout   = reject;\n\n                request.send(payload ? JSON.stringify(payload) : '');\n            });\n        })\n        .then(() => {\n            let response = {};\n\n            if (request.responseText) {\n                try {\n                    response = JSON.parse(request.responseText);\n                } catch (e) {\n                    throw new Error('[ResourceXhr] Response contained invalid JSON');\n                }\n            }\n\n            if (request.status >= CODE_CLIENT_ERROR && request.status < CODE_SERVER_ERROR) {\n                throw response;\n            } else if (request.status >= CODE_SERVER_ERROR) {\n                throw new Error(request.status);\n            }\n\n            return response;\n        });\n}\n\n/**\n * @private\n * @static\n * @param  {string} input\n * @return {string}\n */\n\nfunction encodeSnakeCaseUriComponent(input) {\n    return encodeURIComponent(input)\n        .replace(/([A-Z])/g, '_$1')\n        .replace(/^_/, '')\n        .toLowerCase();\n}\n\nResourceXhr.xhr = xhr;\n\nexport default ResourceXhr;"]}