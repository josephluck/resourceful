{"version":3,"sources":["../../src/resources/ResourceMongoose.js"],"names":["module","exports","ResourceMongoose"],"mappings":";;AAAA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEAA,OAAOC,OAAP,GAAiBC,gBAAjB","file":"ResourceMongoose.js","sourcesContent":["/**\n * FIXME: Needs migrating over to new format\n */\n\n// var ResourceBase = require('./resource-base');\n// var ObjectId     = require('mongoose').Types.ObjectId;\n\n// var ResourceMongoose = function() {\n//     var args = Array.prototype.concat.apply([null], arguments);\n//     var _    = new (ResourceMongoose.Private.bind.apply(ResourceMongoose.Private, args))();\n\n//     this.getOne         = _.getOne.bind(_);\n//     this.get            = _.get.bind(_);\n//     this.create         = _.create.bind(_);\n//     this.update         = _.update.bind(_);\n//     this.delete         = _.delete.bind(_);\n//     this.flushCache     = _.flushCache.bind(_);\n\n//     Object.seal(this);\n// };\n\n// ResourceMongoose.Private = function() {\n//     ResourceBase.apply(this, arguments);\n\n//     this.config = new ResourceMongoose.Config();\n\n//     Object.seal(this);\n\n//     this.init.apply(this, arguments);\n// };\n\n// ResourceMongoose.Private.prototype = Object.create(ResourceBase.prototype);\n\n// Object.assign(ResourceMongoose.Private.prototype, {\n//     constructor: ResourceMongoose.Private,\n\n//     /**\n//      * @private\n//      * @param   {object} [query]\n//      * @return  {Promise<object[]>}\n//      */\n\n//     get: function(query) {\n//         var self       = this;\n//         var wasCached  = false;\n//         var requestId  = '';\n\n//         requestId = ResourceBase.getRequestId(arguments);\n\n//         if (self.activeRequests[requestId]) {\n//             // One or more identical requests already exists, return reference to original promise\n\n//             return self.activeRequests[requestId];\n//         }\n\n//         return (self.activeRequests[requestId] = (Promise.resolve()\n//             .then(function() {\n//                 var resources       = null;\n//                 var dbQuery         = null;\n//                 var pageNumber      = 1;\n//                 var entriesPerPage  = void(0);\n//                 var startIndex      = 0;\n//                 var sort            = '';\n\n//                 // TODO: make DB-specifics configurable to resource - resource should be generic by default\n\n//                 if (query && query.entriesPerPage) {\n//                     // Set pagination instructions\n\n//                     pageNumber      = parseInt(query.pageNumber);\n//                     entriesPerPage  = parseInt(query.entriesPerPage);\n\n//                     if (entriesPerPage < Infinity) {\n//                         startIndex = entriesPerPage * (pageNumber - 1);\n//                     }\n\n//                     sort = '-_id';\n//                 }\n\n//                 if (!query || !Object.keys(query).length) {\n//                     sort = '-_id';\n//                 }\n\n//                 if (self.config.enableCache) {\n//                     // Find resources already in the cache\n\n//                     resources = self.readFromCache(query);\n//                 }\n\n//                 if (resources) {\n//                     wasCached = true;\n\n//                     return resources;\n//                 } else {\n//                     dbQuery = self.constructMongoQuery(query);\n\n//                     return self.config.Model.find(dbQuery, '-__v')\n//                         .sort(sort)\n//                         .skip(startIndex)\n//                         .limit(entriesPerPage)\n//                         .populate(self.config.populate)\n//                         .then(function(documents) {\n//                             return Promise.all(documents.map(function(document) {\n//                                 var args = Array.prototype.slice.call(arguments, 1);\n\n//                                 args.unshift(document);\n\n//                                 return self.transformDocument.apply(self, args);\n//                             }));\n//                         });\n//                 }\n//             })\n//             .then(function(resources) {\n//                 delete self.activeRequests[requestId];\n\n//                 if (self.config.enableCache && !wasCached) {\n//                     self.writeToCache(query, resources);\n\n//                     return self.readFromCache(query);\n//                 } else {\n//                     return resources;\n//                 }\n//             })));\n//     },\n\n//     /**\n//      * @private\n//      * @param   {object}    query\n//      * @return  {object}\n//      */\n\n//     constructMongoQuery: function(query) {\n//         var dbQuery = {};\n//         var key     = '';\n//         var value   = null;\n\n//         for (key in query) {\n//             value = query[key];\n\n//             if (Array.isArray(value)) {\n//                 value = {\n//                     $in: value\n//                 };\n//             }\n\n//             if (key === 'id') {\n//                 // Rename id to _id if present in query\n\n//                 dbQuery['_id'] = value;\n//             } else {\n//                 dbQuery[key] = value;\n//             }\n//         }\n\n//         delete dbQuery.pageNumber;\n//         delete dbQuery.entriesPerPage;\n\n//         return dbQuery;\n//     },\n\n//     /**\n//      * @private\n//      * @param   {Document} document\n//      * @return  {Promise<object>}\n//      */\n\n//     transformDocument: function(document) {\n//         var self     = this;\n//         var resource = null;\n//         var args     = null;\n\n//         return Promise.resolve()\n//             .then(function() {\n//                 args = Array.prototype.slice(arguments, 1);\n\n//                 resource = document.toObject({\n//                     virtuals: true\n//                 });\n\n//                 delete resource._id;\n//                 delete resource.__v;\n\n//                 self.stripMongoCruft(resource);\n//             })\n//             .then(function() {\n//                 var model = null;\n\n//                 if (typeof self.config.ViewModel === 'function') {\n//                     model = new self.config.ViewModel();\n\n//                     resource = Object.assign(model, resource);\n\n//                     if (typeof model.init === 'function') {\n//                         args.unshift(self.resourceProvider);\n\n//                         return model.init.apply(model, args);\n//                     }\n//                 }\n//             })\n//             .then(function() {\n//                 return resource;\n//             });\n//     },\n\n//     /**\n//      * Convert any Mongo ObjectId values to strings.\n//      *\n//      * @private\n//      * @param {object} mongoObject\n//      */\n\n//     stripMongoCruft: function(mongoObject) {\n//         var self    = this,\n//             key     = null,\n//             prop    = null;\n\n//         for (key in mongoObject) {\n//             prop = mongoObject[key];\n\n//             if (!prop) continue;\n\n//             if (prop instanceof ObjectId) {\n//                 mongoObject[key] = prop.toString();\n//             } else if (prop instanceof Date) {\n//                 mongoObject[key] = prop.toISOString();\n//             } else if (typeof prop === 'object') {\n//                 self.stripMongoCruft(prop);\n//             }\n//         }\n//     },\n\n//     /**\n//      * @param   {object} payload\n//      * @return  {Promise<object>}\n//      */\n\n//     create: function(payload) {\n//         var self        = this,\n//             resource    = null;\n\n//         resource = new self.config.Model(payload);\n\n//         return resource.save()\n//             .then(function(document) {\n//                 return self.transformDocument(document);\n//             });\n//     },\n\n//     /**\n//      * @param   {object}    query\n//      * @param   {object}    payload\n//      * @param   {object}   [options]\n//      * @return  {Promise}\n//      */\n\n//     update: function(query, payload, options) {\n//         var self        = this,\n//             dbQuery     = null;\n\n//         options = options || {};\n\n//         dbQuery = self.constructMongoQuery(query);\n\n//         return self.config.Model.findOneAndUpdate(dbQuery, payload, {\n//             upsert: options.upsert ? true : false\n//         })\n//             .then(function(document) {\n//                 return self.transformDocument(document);\n//             });\n//     },\n\n//     /**\n//      * @param   {object}    query\n//      * @param   {object}    [options]\n//      * @return  {Promise}\n//      */\n\n//     delete: function(query, options) {\n//         var self        = this;\n//         var dbQuery     = null;\n//         var document    = null;\n\n//         options = options || {};\n\n//         dbQuery = self.constructMongoQuery(query);\n\n//         return self.config.Model.findOne(dbQuery, '-__v')\n//             .then(function(_document) {\n//                 document = _document;\n\n//                 return self.config.Model.findOneAndRemove(dbQuery);\n//             })\n//             .then(function() {\n//                 return self.transformDocument(document);\n//             });\n//     }\n// });\n\n// ResourceMongoose.Config = function() {\n//     ResourceBase.ConfigBase.call(this);\n\n//     this.Model     = null;\n//     this.ViewModel = null;\n//     this.populate  = '';\n\n//     Object.seal(this);\n// };\n\nmodule.exports = ResourceMongoose;"]}