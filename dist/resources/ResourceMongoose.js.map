{"version":3,"sources":["../../src/resources/ResourceMongoose.js"],"names":["ResourceMongoose","Config","mongoose","Object","seal","ObjectId","Implementation","config","configure","query","Promise","resolve","then","dbQuery","constructMongoQuery","$page","$offset","$limit","$sort","parseInt","Infinity","keys","length","Model","find","sort","skip","limit","populate","documents","map","transformDocumentToPlainObject","payload","doc","save","options","findOneAndUpdate","document","findOne","_doc","findOneAndRemove","key","value","Array","isArray","$in","obj","toObject","virtuals","_id","__v","stripMongoCruft","toString","Date","toISOString"],"mappings":"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","file":"ResourceMongoose.js","sourcesContent":["import {Types}          from 'mongoose';\n\nimport ResourceBase     from './ResourceBase';\nimport ConfigRoot       from '../config/ConfigRoot';\nimport ConfigMongoose   from '../config/ConfigMongoose';\nimport IResource        from '../interfaces/IResource';\n\nclass ResourceMongoose extends IResource {}\n\nconst Config = class extends ConfigRoot {\n    constructor() {\n        super();\n\n        this.mongoose = new ConfigMongoose();\n\n        Object.seal(this);\n    }\n};\n\nconst {ObjectId} = Types;\n\nResourceMongoose.Implementation = class extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, Config);\n\n        Object.seal(this);\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object} query\n     * @return  {object[]}\n     */\n\n    queryService(query={}) {\n        return Promise.resolve()\n            .then(() => {\n                const dbQuery = constructMongoQuery(query);\n\n                let $page   = 1;\n                let $offset = 0;\n                let $limit  = 100;\n                let $sort   = '';\n\n                if (query.$limit && query.$page) {\n                    $page  = parseInt(query.$page);\n                    $limit = parseInt(query.$limit);\n\n                    if ($limit < Infinity) {\n                        $offset = $limit * ($page - 1);\n                    }\n\n                    $sort = '-_id';\n                } else if (query.$limit && typeof query.$offset === 'number') {\n                    $limit = query.$limit;\n                    $offset = query.$offset;\n                }\n\n                if (!Object.keys(query).length) {\n                    $sort = '-_id';\n                }\n\n                return this.config.mongoose.Model.find(dbQuery, '-__v')\n                    .sort($sort)\n                    .skip($offset)\n                    .limit($limit)\n                    .populate(this.config.mongoose.populate)\n                    .then(documents => documents.map(transformDocumentToPlainObject));\n            });\n    }\n\n    /**\n     * @public\n     * @param   {object} payload\n     * @return  {Promise<object>}\n     */\n\n    create(payload) {\n        const doc = new this.config.mongoose.Model(payload);\n\n        return doc.save()\n            .then(transformDocumentToPlainObject);\n    }\n\n    /**\n     * @public\n     * @param   {object}    query\n     * @param   {object}    payload\n     * @param   {object}   [options={}]\n     * @return  {Promise}\n     */\n\n    update(query, payload, options={}) {\n        const dbQuery = constructMongoQuery(query);\n\n        return this.config.mongoose.Model.findOneAndUpdate(dbQuery, payload, options)\n            .then(document => document ? transformDocumentToPlainObject(document) : null);\n    }\n\n    /**\n     * @public\n     * @param   {object}    query\n     * @return  {Promise}\n     */\n\n    delete(query) {\n        const dbQuery = constructMongoQuery(query);\n\n        let doc = null;\n\n        return this.config.mongoose.Model.findOne(dbQuery, '-__v')\n            .then(_doc => {\n                doc = _doc;\n\n                return this.config.mongoose.Model.findOneAndRemove(dbQuery);\n            })\n            .then(() => transformDocumentToPlainObject(doc));\n    }\n};\n\n/**\n * @private\n * @static\n * @param   {object}    query\n * @return  {object}\n */\n\nfunction constructMongoQuery(query) {\n    const dbQuery = {};\n\n    for (let key in query) {\n        let value = query[key];\n\n        if (Array.isArray(value)) {\n            value = {\n                $in: value\n            };\n        }\n\n        if (key === 'id') {\n            // Rename id to _id if present in query\n\n            dbQuery['_id'] = value;\n        } else {\n            dbQuery[key] = value;\n        }\n    }\n\n    delete dbQuery.$limit;\n    delete dbQuery.$offset;\n    delete dbQuery.$page;\n    delete dbQuery.$sort;\n\n    return dbQuery;\n}\n\n/**\n * @private\n * @static\n * @param   {Document} document\n * @return  {object}\n */\n\nfunction transformDocumentToPlainObject(document) {\n    const obj = document.toObject({\n        virtuals: true\n    });\n\n    delete obj._id;\n    delete obj.__v;\n\n    stripMongoCruft(obj);\n\n    return obj;\n}\n\n/**\n * Converts any MongDB types to strings.\n *\n * @private\n * @param {object} obj\n */\n\nfunction stripMongoCruft(obj) {\n    for (let key in obj) {\n        const value = obj[key];\n\n        if (!value) continue;\n\n        if (value instanceof ObjectId) {\n            obj[key] = value.toString();\n        } else if (value instanceof Date) {\n            obj[key] = value.toISOString();\n        } else if (typeof value === 'object') {\n            stripMongoCruft(value);\n        }\n    }\n}\n\nexport default ResourceMongoose;"]}