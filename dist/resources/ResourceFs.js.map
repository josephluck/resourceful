{"version":3,"sources":["../../src/resources/ResourceFs.js"],"names":["ResourceFs","Config","fs","Object","seal","Implementation","config","configure","extension","Error","charAt","root","resolve","path","query","nameKey","hasQuery","transform","name","keys","length","getFilesByName","getAllFiles","names","Array","isArray","Promise","all","map","getFileByName","bind","extRe","RegExp","match","replace","filePath","join","reject","readFile","err","data","then","buffer","toString","file","JSON","parse","contents","transformResponse","readdir","list","filter","fileName","filenames"],"mappings":"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","file":"ResourceFs.js","sourcesContent":["import path         from 'path';\nimport fs           from 'fs-extra';\n\nimport ResourceBase from './ResourceBase';\nimport ConfigRoot   from '../config/ConfigRoot';\nimport ConfigFs     from '../config/ConfigFs';\nimport IResource    from '../interfaces/IResource';\nimport File         from '../models/File';\n\nclass ResourceFs extends IResource {}\n\nconst Config = class extends ConfigRoot {\n    constructor() {\n        super();\n\n        this.fs = new ConfigFs();\n\n        Object.seal(this);\n    }\n};\n\nResourceFs.Implementation = class extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, Config);\n\n        if (!config.fs.extension) {\n            throw new Error('[resource-fs] No file extension specified');\n        }\n\n        if (config.fs.extension.charAt(0) !== '.') {\n            config.fs.extension = '.' + config.fs.extension;\n        }\n\n        this.root = path.resolve(this.config.fs.path);\n\n        Object.seal(this);\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object} query\n     * @return  {object[]}\n     */\n\n    queryService(query={}) {\n        const nameKey = this.config.fs.nameKey;\n\n        let hasQuery  = false;\n        let transform = null;\n        let name      = '';\n\n        if (typeof (transform = this.config.transform.query) === 'function') {\n            query = transform(query);\n        }\n\n        hasQuery = Object.keys(query).length;\n\n        if (hasQuery && typeof query.name === 'undefined') {\n            if (nameKey && (name = query[nameKey])) {\n                // Create new nameKeyed query to preserve cache keys\n\n                query = {name};\n            } else {\n                throw new Error('[resource-fs] Files may only be queried by `name`. Please provide a name key.');\n            }\n        }\n\n        if (hasQuery) {\n            return this.getFilesByName(query);\n        }\n\n        return this.getAllFiles();\n    }\n\n    /**\n     * @private\n     * @param   {object} query\n     * @return  {Promise}\n     */\n\n    getFilesByName(query) {\n        let names = query.name;\n\n        if (!Array.isArray(names)) {\n            names = [names];\n        }\n\n        return Promise.all(names.map(this.getFileByName.bind(this)));\n    }\n\n    /**\n     * @private\n     * @param   {string} name\n     * @return  {Promise}\n     */\n\n    getFileByName(name) {\n        const extRe = new RegExp(this.config.fs.extension + '$', 'g');\n\n        if (name.match(extRe)) {\n            // Strip extension from filename is present\n\n            name = name.replace(extRe, '');\n        }\n\n        const filePath = path.join(this.root, name + this.config.fs.extension);\n\n        return new Promise((resolve, reject) => {\n            fs.readFile(filePath, (err, data) => err ? reject(err) : resolve(data));\n        })\n            .then(buffer => new File(name, buffer.toString()))\n            .then(file => {\n                if (this.config.fs.extension !== '.json') return file;\n\n                return JSON.parse(file.contents);\n            })\n            .then(file => {\n                return this.transformResponse(file);\n            });\n    }\n\n    /**\n     * @private\n     * @return  {Promise}\n     */\n\n    getAllFiles() {\n        return new Promise((resolve, reject) => {\n            fs.readdir(this.root, (err, list) => err ? reject(err) : resolve(list));\n        })\n            .then(list => {\n                // Filter out system files and files not matching the\n                // specified extension\n\n                return list.filter(fileName => {\n                    return fileName.match(/^[^.]/g) && fileName.match(new RegExp(this.config.fs.extension + '$', 'g'));\n                });\n            })\n            .then(filenames => Promise.all(filenames.map(this.getFileByName.bind(this))));\n    }\n};\n\nexport default ResourceFs;"]}