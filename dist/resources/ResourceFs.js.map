{"version":3,"sources":["../../src/resources/ResourceFs.js"],"names":["ResourceFs","Config","fs","Object","seal","Implementation","config","configure","extension","Error","charAt","root","resolve","path","query","req","res","nameKey","Promise","then","transform","TypeError","hasQuery","keys","length","name","getFilesByName","getAllFiles","names","Array","isArray","all","map","getFileByName","bind","extRe","RegExp","match","replace","filePath","join","reject","readFile","err","data","buffer","toString","file","JSON","parse","contents","transformResponse","readdir","list","filter","fileName","filenames","payload","filename","getFilename","json","stringify","indentation","writePath","writeFile","filenameBase"],"mappings":"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","file":"ResourceFs.js","sourcesContent":["import path         from 'path';\nimport fs           from 'fs-extra';\n\nimport ResourceBase from './ResourceBase';\nimport ConfigRoot   from '../config/ConfigRoot';\nimport ConfigFs     from '../config/ConfigFs';\nimport IResource    from '../interfaces/IResource';\nimport File         from '../models/File';\n\nclass ResourceFs extends IResource {}\n\nconst Config = class extends ConfigRoot {\n    constructor() {\n        super();\n\n        this.fs = new ConfigFs();\n\n        Object.seal(this);\n    }\n};\n\nResourceFs.Implementation = class extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, Config);\n\n        if (!config.fs.extension) {\n            throw new Error('[ResourceFs] No file extension specified');\n        }\n\n        if (config.fs.extension.charAt(0) !== '.') {\n            config.fs.extension = '.' + config.fs.extension;\n        }\n\n        this.root = path.resolve(this.config.fs.path);\n\n        Object.seal(this);\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object}        query\n     * @param   {(object|null)} req\n     * @param   {(object|null)} res\n     * @return  {Promise.<object[]>}\n     */\n\n    queryService(query={}, req, res) {\n        const nameKey = this.config.fs.nameKey;\n\n        return Promise.resolve()\n            .then(() => {\n                let transform = null;\n\n                if (typeof (transform = this.config.transform.query) === 'function') {\n                    return transform(query, req, res);\n                }\n\n                return query;\n            })\n            .then(query => {\n                if (!query) {\n                    throw new TypeError('[ResourceFs] `transform.query` function must return an object');\n                }\n\n                const hasQuery = Object.keys(query).length > 0;\n\n                let name = '';\n\n                if (hasQuery && typeof query.name === 'undefined') {\n                    if (nameKey && (name = query[nameKey])) {\n                        // Create new nameKeyed query to preserve cache keys\n\n                        query = {name};\n                    } else {\n                        throw new Error('[ResourceFs] Files may only be queried by `name`. Please provide a name key.');\n                    }\n                }\n\n                if (hasQuery) {\n                    return this.getFilesByName(query);\n                }\n\n                return this.getAllFiles();\n            });\n    }\n\n    /**\n     * @private\n     * @param   {object} query\n     * @return  {Promise}\n     */\n\n    getFilesByName(query) {\n        let names = query.name;\n\n        if (!Array.isArray(names)) {\n            names = [names];\n        }\n\n        return Promise.all(names.map(this.getFileByName.bind(this)));\n    }\n\n    /**\n     * @private\n     * @param   {string} name\n     * @return  {Promise}\n     */\n\n    getFileByName(name) {\n        const extRe = new RegExp(this.config.fs.extension + '$', 'g');\n\n        if (name.match(extRe)) {\n            // Strip extension from filename is present\n\n            name = name.replace(extRe, '');\n        }\n\n        const filePath = path.join(this.root, name + this.config.fs.extension);\n\n        return new Promise((resolve, reject) => {\n            fs.readFile(filePath, (err, data) => err ? reject(err) : resolve(data));\n        })\n            .then(buffer => new File(name, buffer.toString()))\n            .then(file => {\n                if (this.config.fs.extension !== '.json') return file;\n\n                return JSON.parse(file.contents);\n            })\n            .then(file => {\n                return this.transformResponse(file);\n            });\n    }\n\n    /**\n     * @private\n     * @return  {Promise}\n     */\n\n    getAllFiles() {\n        return new Promise((resolve, reject) => {\n            fs.readdir(this.root, (err, list) => err ? reject(err) : resolve(list));\n        })\n            .then(list => {\n                // Filter out system files and files not matching the\n                // specified extension\n\n                return list.filter(fileName => {\n                    return fileName.match(/^[^.]/g) && fileName.match(new RegExp(this.config.fs.extension + '$', 'g'));\n                });\n            })\n            .then(filenames => Promise.all(filenames.map(this.getFileByName.bind(this))));\n    }\n\n    /**\n     * Receives an object and writes it to the filesystem\n     * as a JSON string.\n     *\n     * @public\n     * @return {Promise}\n     */\n\n    create(payload) {\n        return Promise.resolve()\n            .then(() => {\n                const filename  = this.getFilename(payload);\n                const json      = JSON.stringify(payload, null, this.config.fs.indentation);\n                const writePath = path.join(this.root, filename);\n\n                return fs.writeFile(writePath, json);\n            });\n    }\n\n    /**\n     * @private\n     * @param  {object} payload\n     * @return {string}\n     */\n\n    getFilename(payload) {\n        const nameKey = this.config.fs.nameKey;\n\n        let getFilename  = null;\n        let filenameBase = '';\n\n        if (typeof (getFilename = this.config.fs.getFilename) === 'function') {\n            filenameBase = getFilename(payload);\n        } else if (nameKey) {\n            filenameBase = payload[nameKey];\n        }\n\n        if (!filenameBase || typeof filenameBase !== 'string') {\n            throw new TypeError('[ResourceFs] Invalid filename');\n        }\n\n        return filenameBase + this.config.fs.extension;\n    }\n};\n\nexport default ResourceFs;"]}