{"version":3,"sources":["../src/ResourceFs.js"],"names":["ResourceFs","arguments","Private","config","extension","Error","charAt","configure","root","resolve","path","query","hasQuery","Object","keys","length","alias","nameAlias","name","getFilesByName","getAllFiles","names","Array","isArray","Promise","all","map","getFileByName","bind","extRe","RegExp","match","replace","filePath","join","reject","readFile","err","data","then","buffer","toString","file","JSON","parse","contents","transformResponse","readdir","list","filter","fileName","filenames"],"mappings":"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","file":"ResourceFs.js","sourcesContent":["import path         from 'path';\nimport fs           from 'fs-extra';\n\nimport ResourceBase from './ResourceBase';\nimport ConfigFs     from './ConfigFs';\nimport IResource    from './IResource';\nimport File         from './File';\n\nclass ResourceFs extends IResource {\n    constructor() {\n        super(...arguments);\n    }\n}\n\nResourceFs.Private = class _ResourceFs extends ResourceBase {\n    constructor(config) {\n        super();\n\n        if (!config.extension) {\n            throw new Error('[resource-fs] No file extension specified');\n        }\n\n        if (config.extension.charAt(0) !== '.') {\n            config.extension = '.' + config.extension;\n        }\n\n        this.configure(config, ConfigFs);\n\n        this.root = path.resolve(this.config.path);\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object} query\n     * @return  {object[]}\n     */\n\n    queryService(query={}) {\n        const hasQuery  = Object.keys(query).length;\n        const alias     = this.config.nameAlias;\n\n        let name = '';\n\n        if (hasQuery && typeof query.name === 'undefined') {\n            if (alias && (name = query[alias])) {\n                // Create new aliased query to preserve cache keys\n\n                query = {name};\n            } else {\n                throw new Error('[resource-fs] Files may only be queried by `name`. Please provide an alias.');\n            }\n        }\n\n        if (hasQuery) {\n            return this.getFilesByName(query);\n        }\n\n        return this.getAllFiles();\n    }\n\n    /**\n     * @private\n     * @param   {object} query\n     * @return  {Promise}\n     */\n\n    getFilesByName(query) {\n        let names = query.name;\n\n        if (!Array.isArray(names)) {\n            names = [names];\n        }\n\n        return Promise.all(names.map(this.getFileByName.bind(this)));\n    }\n\n    /**\n     * @private\n     * @param   {string} name\n     * @return  {Promise}\n     */\n\n    getFileByName(name) {\n        const extRe = new RegExp(this.config.extension + '$', 'g');\n\n        if (name.match(extRe)) {\n            // Strip extension from filename is present\n\n            name = name.replace(extRe, '');\n        }\n\n        const filePath = path.join(this.root, name + this.config.extension);\n\n        return new Promise((resolve, reject) => {\n            fs.readFile(filePath, (err, data) => err ? reject(err) : resolve(data));\n        })\n            .then(buffer => new File(name, buffer.toString()))\n            .then(file => {\n                if (this.config.extension !== '.json') return file;\n\n                return JSON.parse(file.contents);\n            })\n            .then(file => {\n                return this.transformResponse(file);\n            });\n    }\n\n    /**\n     * @private\n     * @return  {Promise}\n     */\n\n    getAllFiles() {\n        return new Promise((resolve, reject) => {\n            fs.readdir(this.root, (err, list) => err ? reject(err) : resolve(list));\n        })\n            .then(list => {\n                // Filter out system files and files not matching the\n                // specified extension\n\n                return list.filter(fileName => {\n                    return fileName.match(/^[^.]/g) && fileName.match(new RegExp(this.config.extension + '$', 'g'));\n                });\n            })\n            .then(filenames => Promise.all(filenames.map(this.getFileByName.bind(this))));\n    }\n};\n\nexport default ResourceFs;"]}