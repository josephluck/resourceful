{"version":3,"sources":["../src/ResourceXhr.js"],"names":["ResourceXhr","arguments","query","queries","queryString","prop","value","replace","toLowerCase","Array","isArray","i","item","push","encodeURIComponent","length","join","method","path","data","request","window","XMLHttpRequest","CODE_CLIENT_ERROR","CODE_SERVER_ERROR","payload","Promise","resolve","then","serializeQuery","Error","open","setRequestHeader","timeout","reject","onload","onerror","ontimeout","send","JSON","stringify","response","parse","e","status","Private","config","configure","body","xhr","transformResponse","bind","catch","transformError","flushCache","flushCacheStore","entries","TypeError"],"mappings":"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","file":"ResourceXhr.js","sourcesContent":["import ResourceBase from './ResourceBase';\nimport ConfigXhr    from './ConfigXhr';\nimport IResource    from './IResource';\n\nclass ResourceXhr extends IResource {\n    constructor() {\n        super(...arguments);\n    }\n\n    /**\n     * Takes a query object and returns a serialized query string.\n     * Handles arrays by adding multiple occurences of the same key.\n     *\n     * @static\n     * @public\n     * @param   {object} query\n     * @return  {string}\n     */\n\n    static serializeQuery(query) {\n        const queries = [];\n\n        let queryString = '';\n\n        for (let prop in query) {\n            let value = query[prop];\n\n            // Convert all query parameters to 'snake_case'\n\n            prop = prop\n                .replace(/([A-Z])/g, '_$1').replace(/^_/, '')\n                .toLowerCase();\n\n            if (Array.isArray(value)) {\n                for (let i = 0, item; (item = value[i]); i++) {\n                    queries.push(encodeURIComponent(prop) + '=' + encodeURIComponent(item));\n                }\n            } else {\n                queries.push(encodeURIComponent(prop) + '=' + encodeURIComponent(value));\n            }\n        }\n\n        if (queries.length) {\n            queryString = '?' + queries.join('&');\n        }\n\n        return queryString;\n    }\n\n    /**\n     * A promise-based wrapper for an XHR request.\n     *\n     * @static\n     * @public\n     * @param   {string}      method\n     * @param   {string}      path\n     * @param   {object}      data\n     * @return  {Promise.<object>}\n     */\n\n    static xhr(method, path, data) {\n        const request = new window.XMLHttpRequest();\n        const CODE_CLIENT_ERROR = 400;\n        const CODE_SERVER_ERROR = 500;\n\n        let payload = null;\n\n        return Promise.resolve()\n            .then(() => {\n                switch (method) {\n                    case 'get':\n                    case 'delete':\n                        path += ResourceXhr.serializeQuery(data);\n\n                        break;\n                    case 'put':\n                    case 'post':\n                        payload = data;\n\n                        break;\n                    default:\n                        throw new Error('[resource-xhr] Invalid XHR method');\n                }\n\n                request.open(method, path, true);\n\n                if (payload) {\n                    request.setRequestHeader('Content-Type', 'application/json');\n                }\n\n                request.timeout = 60000;\n\n                return new Promise((resolve, reject) => {\n                    request.onload      = resolve;\n                    request.onerror     = reject;\n                    request.ontimeout   = reject;\n\n                    request.send(payload ? JSON.stringify(payload) : '');\n                });\n            })\n            .then(() => {\n                let response = {};\n\n                if (request.response) {\n                    try {\n                        response = JSON.parse(request.response);\n                    } catch (e) {\n                        throw new Error('[ResourceXhr] Response contained invalid JSON');\n                    }\n                }\n\n                if (request.status >= CODE_CLIENT_ERROR && request.status < CODE_SERVER_ERROR) {\n                    throw response;\n                } else if (request.status >= CODE_SERVER_ERROR) {\n                    throw new Error(request.status);\n                }\n\n                return response;\n            });\n    }\n}\n\nResourceXhr.Private = class _ResourceXhr extends ResourceBase {\n    constructor(config) {\n        super();\n\n        this.configure(config, ConfigXhr);\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    create(body) {\n        return ResourceXhr.xhr('post', this.config.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} body\n     * @return {Promise.<*>}\n     */\n\n    update(body) {\n        this.flushCache();\n\n        // TODO: iterate through primary key and secondary keys,\n        // and use flushCacheStore instead of flushCache\n\n        return ResourceXhr.xhr('put', this.config.path, body)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * @pulic\n     * @param {object} query\n     * @return {Promise.<*>}\n     */\n\n    delete(query) {\n        this.flushCacheStore(query);\n\n        // iterate through primary and secondary keys and flush secondary stores\n\n        return ResourceXhr.xhr('delete', this.config.path, query)\n            .then(this.transformResponse.bind(this))\n            .catch(this.transformError.bind(this));\n    }\n\n    /**\n     * Implements the service call for this type of resource.\n     *\n     * @private\n     * @param   {object} query\n     * @return  {object[]}\n     */\n\n    queryService(query) {\n        return ResourceXhr.xhr('get', this.config.path, query)\n            .then(response => this.transformResponse(response))\n            .then(entries => {\n                if (!Array.isArray(entries)) {\n                    throw new TypeError('[resource-xhr] Resource service must return an array');\n                }\n\n                return entries;\n            })\n            .catch(this.transformError.bind(this));\n    }\n};\n\nexport default ResourceXhr;"]}