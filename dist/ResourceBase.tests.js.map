{"version":3,"sources":["../src/ResourceBase.tests.js"],"names":["use","describe","resource","api","configure","primaryKey","enableCache","queryService","get","bind","it","then","assert","deepEqual","entries","cache","$$store$$","wasCalled","query","equal","role","length","isOk","Developer","flushCacheStore"],"mappings":"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","file":"ResourceBase.tests.js","sourcesContent":["import chai         from 'chai';\nimport deepEqual    from 'chai-shallow-deep-equal';\n\nimport mockEntries  from '../tests/mock/people.json';\nimport Api          from '../tests/mock/api.js';\nimport ResourceBase from './ResourceBase.js';\n\nchai.use(deepEqual);\n\ndescribe('ResourceBase', function() {\n    const resource      = new ResourceBase();\n    const api           = new Api(mockEntries);\n\n    resource.configure({\n        primaryKey: 'id',\n        enableCache: true\n    });\n\n    resource.queryService = api.get.bind(api);\n\n    it('should return a full dataset if no query object passed', function() {\n        return resource.get()\n            .then(entries => {\n                chai.assert.deepEqual(entries, mockEntries);\n            });\n    });\n\n    it('it should load items into the cache, in a root store if no query passed', function() {\n        chai.assert.deepEqual(resource.cache.$$store$$, mockEntries);\n    });\n\n    it('should not hit the cache if queried again', function() {\n        let wasCalled = false;\n\n        resource.queryService = function(query) {\n            wasCalled = true;\n\n            return api.get(query);\n        };\n\n        return resource.get()\n            .then(entries => {\n                chai.assert.deepEqual(entries, mockEntries);\n                chai.assert.equal(wasCalled, false);\n            });\n    });\n\n    it('should return a subset if queried by key/value', function() {\n        return resource.get({\n            role: 'Developer'\n        })\n            .then(entries => {\n                chai.assert.equal(entries.length, 3);\n            });\n    });\n\n    it('should load multiple items into a key/value cache if queried', function() {\n        chai.assert.isOk(resource.cache.role);\n        chai.assert.isOk(resource.cache.role.Developer);\n        chai.assert.isOk(resource.cache.role.Developer.$$store$$);\n        chai.assert.equal(resource.cache.role.Developer.$$store$$.length, 3);\n    });\n\n    it('should not hit the cache if queried again', function() {\n        let wasCalled = false;\n\n        resource.queryService = function(query) {\n            wasCalled = true;\n\n            return api.get(query);\n        };\n\n        return resource.get({\n            role: 'Developer'\n        })\n            .then(entries => {\n                chai.assert.equal(entries.length, 3);\n                chai.assert.equal(wasCalled, false);\n            });\n    });\n\n    it('should flush the root store if no query passed to `flushCacheStore()`', function() {\n        resource.flushCacheStore();\n\n        chai.assert.equal(resource.cache.$$store$$, null);\n    });\n\n    it('should flush a key/value store if query passed to `flushCacheStore()`', function() {\n        resource.flushCacheStore({\n            role: 'Developer'\n        });\n\n        chai.assert.equal(resource.cache.role.Developer.$$store$$, null);\n    });\n});"]}